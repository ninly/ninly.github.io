<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ninlyâ€™s bog</title><link href="http://ninly.github.io/" rel="alternate"></link><link href="http://ninly.github.io/feeds/tag/eudyptula.atom.xml" rel="self"></link><id>http://ninly.github.io/</id><updated>2014-07-01T07:10:00-05:00</updated><entry><title>LabVIEW Break!</title><link href="http://ninly.github.io/posts/2014/07/labview-break/" rel="alternate"></link><updated>2014-07-01T07:10:00-05:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-07-01:posts/2014/07/labview-break/</id><summary type="html">&lt;p&gt;As of a month or so ago I was still going strong with the Eudyptula
Challenge tasks: building development kernels, hacking on dynamically
loadable modules, exploring intricacies of git, and generally learning
my way around the internal structures that make Linux tick.&lt;/p&gt;
&lt;p&gt;I had just begun to really dig into the whole idea of concurrency and
the mechanisms (locking and so forth) and race condition caveats the
kernel and its documentation have to offer. Then something came up.&lt;/p&gt;
&lt;p&gt;Cutscene with Barbecue ----------------------&lt;/p&gt;
&lt;p&gt;Our local National Instruments LabVIEW User Group runs a pretty tight
ship. I haven't used LabVIEW itself much (I have messed around with
it quite a bit), but the test equipment I've been working with for
the past couple of years runs on LabWindows/CVI -- NI's C environment
(&amp;quot;C with training wheels&amp;quot;, a coworker of mine likes to say). So I'm
not especially proficient in LabVIEW, but I do attend the user group
meetings: There's usually a fairly interesting demonstration of its
features or of some real-world deployment. The whole concept of dataflow
programming is interesting to me for a few reasons, too, related in part
to my longtime interest in audio processing -- cf. Pure Data, Max, even
(going back a few extra years) Turbosynth.&lt;/p&gt;
&lt;p&gt;And I'd be lying if I told you the free barbecue they brought into the
meetings wasn't a factor.&lt;/p&gt;
&lt;p&gt;Last year the user group offered its regular attendees the chance to
take NI's CLAD certification exam at no cost. It took a little bit of
study, but the CLAD is their entry-level certification. The exam is
fairly basic, and I passed without much difficulty.&lt;/p&gt;
&lt;p&gt;If you're not familiar with LabVIEW, it's pretty neat stuff. It's
a full-featured high-level language, but the development interface
is based on the concept of &lt;em&gt;dataflow&lt;/em&gt;. That is, instead of writing
text-based code, you connect functional blocks together with graphical
&amp;quot;wires&amp;quot;. It is used extensively in a number of industries, particularly
in testing and industrial data-aquisition applications. If you're just a
curious amateur the software isn't cheap, but if (like me) you work in
an environment where it is available, it's worth checking out.&lt;/p&gt;
&lt;div class="section" id="would-you-like-some-exams-with-that-barbecue"&gt;
&lt;h2&gt;Would You Like some Exams with that Barbecue?&lt;/h2&gt;
&lt;p&gt;This spring they offered a similar opportunity, but for people who
aready have the CLAD certification they included the CLD exam -- their
full professional development certification.&lt;/p&gt;
&lt;p&gt;Great, I thought -- not a chance I should pass up. &lt;em&gt;But&lt;/em&gt;... the CLD is a
&lt;em&gt;far&lt;/em&gt; more challenging exam. It's geared not only toward proficiency but
&lt;em&gt;facility&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It is a 4-hour practical exam. They shut you in a room, give you
a sealed spec for an application of nontrivial complexity (typical
textbook state machines -- modelling behavior of systems like ATMs,
vending machines, and so forth -- but with a lot of real-world-like
functions, constraints, and corner cases). Without any external
references or breaks, you have to build a working application.&lt;/p&gt;
&lt;p&gt;Four hours may seem like a long time, but it's widely regarded as the
most challenging aspect of the CLD exam. To implement the typically
specified complexit in the time allotted, you really have to know
your way around the software &lt;em&gt;and&lt;/em&gt; be able to make quick decisions about
how to implement the application's logic.&lt;/p&gt;
&lt;p&gt;And there's not any wiggle room. You can't take breaks or use your
phone. There's no Internet or reference manual available (other than
LabVIEW's built-in help). In four hours, you save your code to a thumb
drive, seal it in an envelope, and wait several weeks for an anonymous
NI engineer to review your code. I took the exam in mid-May, and still
haven't received my results.&lt;/p&gt;
&lt;p&gt;As I mentioned, I haven't really used LabVIEW that much. When I heard
that I could take the CLD exam for free (did I mention, it usually costs
about $400 to take it), and that I only had a few weeks to prepare...
I did a quick deep-dive into some LabVIEW books, familiarizing myself
with some of the conventions and best practices for more intricate
applications (things like event-driven logic, queued state machines, and
producer-consumer frameworks, among others).&lt;/p&gt;
&lt;p&gt;I learned a ton, but I would be shocked if I passed. That is really OK
-- getting the certification would have been lovely, but the experience
of preparing for and taking the exam were my primary goals. I got a
whole lot out of it, not only that little bout of self-training, but the
exam itself was pretty eye-opening, too. Not only will I be far better
prepared to approach the exam next time it is offered, but it has given
me some ideas for things I could do with LabVIEW in the meantime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-to-the-penguin"&gt;
&lt;h2&gt;Back to the Penguin&lt;/h2&gt;
&lt;p&gt;Of course, through all of that, my kernel-coding efforts were on hold.
Since the CLD exam, I've spent the last two weeks refamiliarizing myself
with the Eudyptula Challenge task I was on when I set it down. It took
less time than I feared to find my bearings; I had been in the middle of
Task 8, and submitted it just the other day. From what I understand, it
takes about a week for Little to respond to that one (one of the more
complex tasks), so I'm using the downtime to run through kernel-build
processes again, as that's a skill that tends to languish when I don't
use it regularly, and it's been a while. I have a feeling I'll be using
it again soon.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux-kernel"></category><category term="eudyptula"></category><category term="labview"></category><category term="dataflow"></category></entry><entry><title>Taking the Eudyptula Challenge</title><link href="http://ninly.github.io/posts/2014/03/eudyptula-challenge/" rel="alternate"></link><updated>2014-03-28T22:10:00-05:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-03-28:posts/2014/03/eudyptula-challenge/</id><summary type="html">&lt;p&gt;It wasn't so long ago that I was pounding away on my Matasano Challenge
code, and thinking about how I might write about the progress I was
making. It was abstract, though -- progress to be sure, but a lot of
the kind of thing you seem to learn when looking back at code you keyed
several months prior. Painful in some ways, enlightening study in
others.&lt;/p&gt;
&lt;p&gt;I had already been distracted once, hence the several months. Somewhere
in the midst of a &lt;em&gt;real&lt;/em&gt; course I had to take in a &lt;em&gt;real&lt;/em&gt; school
(Matasano's efforts and organization are real, of course, but I didn't
have to pay them money or depend on a certain grade for economic
reasons) and the crush of raising a couple of infants who don't know
a whole lot about cryptography or programming, my code fell to the
wayside. I still hope to get back to it one day.&lt;/p&gt;
&lt;p&gt;But something else happened recently, even as I was starting
to delve back into the Matasano stuff. A &lt;a class="reference external" href="http://eudyptula-challenge.org/"&gt;new challenge&lt;/a&gt;, modeled on Matasano's approach, but
geared toward Linux kernel hacking and many of the practical intricacies
involved with the Linux kernel workflow: coding style, patch submission,
and so on, as well as the long slog of learning how an operating system
actually &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I found out about Eudyptula last month and signed right up. My free time
has been wrapped around that axle ever since. Unfortunately, that means
I'm not investing time in active FOSS projects or code I can share,
which was a thing with Matasano, too. But I'm working on a foundation.&lt;/p&gt;
&lt;p&gt;I'm still fascinated with cryptography, both practical and theoretical,
and the kinds of tasks that Matasano was throwing at me were also
especially useful in getting my head around some day-to-day code
organization and workflow. But &lt;em&gt;system programming&lt;/em&gt; has always been a
deeper interest of mine than some of the common learn-to-code tutorial
stuff out there these days. My day job involves embedded systems and
their designers, too, and I always had a strong inpulse for at least
the idea of actually &lt;em&gt;developing&lt;/em&gt; the kinds of real-time systems I
test and troubleshoot. But learning the low level has often felt
pretty slow-going, and I haven't found a whole lot of programmatic,
goal-oriented guidance. Eudyptula's little penguin seems, so far, to be
providing just what I needed.&lt;/p&gt;
&lt;p&gt;That's not to say he's making it &lt;em&gt;easy&lt;/em&gt;; it's still slow-going. But
that's because the Linux kernel is massive and mindbogglingly complex.
There's a sense of &lt;em&gt;progress&lt;/em&gt;, though, of what to read next, of what I'm
missing. And #kernelnewbies (an IRC channel) is providing a good amount
of assistance and perspective, too. There is a sense of goal in it all,
too: The introductory email in the series suggests that after completing
the exercises one should be equipped, if not to &lt;em&gt;be&lt;/em&gt; a kernel subsystem
maintainer (heavens forbid!), at least to understand what the heck it is
they do, and to be an active developer.&lt;/p&gt;
&lt;p&gt;And in addition to all that personal practical coolness, we're talking
about the Linux kernel: one of the most significant collaborative
efforts in the history of cooperation. Perplexing at times, not without
its barbs and pitfalls, but an effective sort of juggernaut that we all
use and benefit from every day, whether or not we know it or think about
it. And in its own interest of longevity, that juggernaut has produced
this little spinoff; it's pretty exciting to be plugged into that.&lt;/p&gt;
</summary><category term="linux-kernel"></category><category term="eudyptula"></category></entry></feed>