<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ninlyâ€™s bog</title><link href="http://ninly.github.io/" rel="alternate"></link><link href="http://ninly.github.io/feeds/all.atom.xml" rel="self"></link><id>http://ninly.github.io/</id><updated>2014-12-09T12:00:00-06:00</updated><entry><title>More virtualenv (sans) magic</title><link href="http://ninly.github.io/posts/2014/12/more-virtualenv-sans-magic/" rel="alternate"></link><updated>2014-12-09T12:00:00-06:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-12-09:posts/2014/12/more-virtualenv-sans-magic/</id><summary type="html">&lt;p&gt;Several months back I was figuring out how to use pip and virtualenv,
and generally having a pretty good time with my python development
experience. However, I kept running into interesting code examples and
projects that required matplotlib and the numpy/scipy stack. Since I've
also been trying to get familiar with mathematical modeling, analysis
and visualization techniques, these are indispensable dependencies.&lt;/p&gt;
&lt;p&gt;I could (and had) play with them &amp;quot;raw&amp;quot;, but ran into problems when I
tried to enjoy the control and isolation afforded by virtualenv. Last
week, though, in one of my periodic attempts to comb through dependency
installations, I stumbled on &lt;a class="reference external" href="https://gist.github.com/fyears/7601881"&gt;this gist&lt;/a&gt;, and it cleared up all my
problems. I haven't delved into whatever reasons may have existed for my
previous difficulties, but if you're having trouble, maybe it will help
you. All I did was to set up a new virtual env and pip-install my way
through the list. It... just worked, for the most part (thanks,
&lt;a class="reference external" href="https://www.fyears.org/"&gt;fyears&lt;/a&gt;!), although I did have to update some fortran-compiler stuff
that numpy needed.&lt;/p&gt;
</summary><category term="python"></category><category term="dependencies"></category></entry><entry><title>LabVIEW Break!</title><link href="http://ninly.github.io/posts/2014/07/labview-break/" rel="alternate"></link><updated>2014-07-01T07:10:00-05:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-07-01:posts/2014/07/labview-break/</id><summary type="html">&lt;p&gt;As of a month or so ago I was still going strong with the Eudyptula
Challenge tasks: building development kernels, hacking on dynamically
loadable modules, exploring intricacies of git, and generally learning
my way around the internal structures that make Linux tick.&lt;/p&gt;
&lt;p&gt;I had just begun to really dig into the whole idea of concurrency and
the mechanisms (locking and so forth) and race condition caveats the
kernel and its documentation have to offer. Then something came up.&lt;/p&gt;
&lt;div class="section" id="cutscene-with-bbq"&gt;
&lt;h2&gt;Cutscene with BBQ&lt;/h2&gt;
&lt;p&gt;Our local National Instruments LabVIEW User Group runs a pretty tight
ship. I haven't used LabVIEW itself much (I have messed around with
it quite a bit), but the test equipment I've been working with for
the past couple of years runs on LabWindows/CVI -- NI's C environment
(&amp;quot;C with training wheels&amp;quot;, a coworker of mine likes to say). So I'm
not especially proficient in LabVIEW, but I do attend the user group
meetings: There's usually a fairly interesting demonstration of its
features or of some real-world deployment. The whole concept of dataflow
programming is interesting to me for a few reasons, too, related in part
to my longtime interest in audio processing -- cf. Pure Data, Max, even
(going back a few extra years) Turbosynth.&lt;/p&gt;
&lt;p&gt;And I'd be lying if I told you the free barbecue they brought into the
meetings wasn't a factor.&lt;/p&gt;
&lt;p&gt;Last year the user group offered its regular attendees the chance to
take NI's CLAD certification exam at no cost. It took a little bit of
study, but the CLAD is their entry-level certification. The exam is
fairly basic, and I passed without much difficulty.&lt;/p&gt;
&lt;p&gt;If you're not familiar with LabVIEW, it's pretty neat stuff. It's
a full-featured high-level language, but the development interface
is based on the concept of &lt;em&gt;dataflow&lt;/em&gt;. That is, instead of writing
text-based code, you connect functional blocks together with graphical
&amp;quot;wires&amp;quot;. It is used extensively in a number of industries, particularly
in testing and industrial data-aquisition applications. If you're just a
curious amateur the software isn't cheap, but if (like me) you work in
an environment where it is available, it's worth checking out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="would-you-like-an-exam-with-that"&gt;
&lt;h2&gt;Would You Like an Exam with That?&lt;/h2&gt;
&lt;p&gt;This spring they offered a similar opportunity, but for people who
aready have the CLAD certification they offered the CLD exam -- their
full professional development certification.&lt;/p&gt;
&lt;p&gt;Great, I thought -- not a chance I should pass up. It normally costs
about $400. &lt;em&gt;But&lt;/em&gt;... the CLD is a far more challenging exam. It's geared
not only to proficiency, but to &lt;em&gt;facility&lt;/em&gt; with the software and its
graphical language.&lt;/p&gt;
&lt;p&gt;It's a 4-hour practical exam. They shut you in a room, give you
a sealed spec for an application of nontrivial complexity (typical
textbook state machines -- modelling behavior of systems like ATMs,
vending machines, and so forth -- but with a lot of real-world-like
functions, constraints, and corner cases). Without any external
references or breaks, you have to build a working application.&lt;/p&gt;
&lt;p&gt;Four hours may seem like a long time, but it's widely regarded as the
most challenging aspect of the CLD exam. To implement the typically
specified complexity in the time allotted, you really have to know
your way around the software &lt;em&gt;and&lt;/em&gt; be able to make quick decisions about
how to implement the application's logic.&lt;/p&gt;
&lt;p&gt;There's not any wiggle room. You can't take breaks or use your phone. No
Internet or reference manual is available (other than LabVIEW's built-in
help). When time runs out, you save your code to a thumb drive, seal it
in an envelope, and wait several weeks for an anonymous NI engineer to
review your code. To fast-forward a bit: I took the exam back in May, and
still haven't received my results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cram-time"&gt;
&lt;h2&gt;Cram Time&lt;/h2&gt;
&lt;p&gt;As I mentioned, I haven't really used LabVIEW that much. When I heard that I
could take the CLD exam for free, and that I only had a few weeks to prepare...
I did a quick deep-dive into some LabVIEW books, familiarizing myself with some
of the conventions and best practices for more intricate applications (things
like event-driven logic, queued state machines, and producer-consumer
frameworks, among others).&lt;/p&gt;
&lt;p&gt;I learned a ton, but I would be shocked if I passed. That is really OK
-- getting the certification would have been lovely, but the experience
of preparing for and taking the exam were my primary goals. I got a
whole lot out of it, not only in that little bout of self-training, but the
exam itself was pretty eye-opening, too. Not only will I be far better
prepared to approach the exam next time it is offered, but it has given
me some ideas for things I could do with LabVIEW in the meantime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-to-the-penguin"&gt;
&lt;h2&gt;Back to the Penguin&lt;/h2&gt;
&lt;p&gt;Of course, through all of that, my kernel-coding efforts were on hold.
Since the CLD exam, I've spent the last few weeks refamiliarizing myself
with the Eudyptula Challenge task I was on when I set it down. It took
less time than I feared to find my bearings; I had been in the middle of
Task 8, and submitted it just the other day. From what I understand, it
takes about a week for Little to respond to that one (one of the more
complex tasks), so I'm using the downtime to run through kernel-build
processes again, as that's a skill that tends to languish when I don't
use it regularly, and it's been a while. I have a feeling I'll be using
it again soon.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux-kernel"></category><category term="labview"></category></entry><entry><title>Taking the Eudyptula Challenge</title><link href="http://ninly.github.io/posts/2014/03/eudyptula-challenge/" rel="alternate"></link><updated>2014-03-28T22:10:00-05:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-03-28:posts/2014/03/eudyptula-challenge/</id><summary type="html">&lt;p&gt;It wasn't so long ago that I was pounding away on my Matasano Challenge
code, and thinking about how I might write about the progress I was
making. It was abstract, though -- progress to be sure, but a lot of
the kind of thing you seem to learn when looking back at code you keyed
several months prior. Painful in some ways, enlightening study in
others.&lt;/p&gt;
&lt;p&gt;I had already been distracted once, hence the several months. Somewhere
in the midst of a &lt;em&gt;real&lt;/em&gt; course I had to take in a &lt;em&gt;real&lt;/em&gt; school
(Matasano's efforts and organization are real, of course, but I didn't
have to pay them money or depend on a certain grade for economic
reasons) and the crush of raising a couple of infants who don't know
a whole lot about cryptography or programming, my code fell to the
wayside. I still hope to get back to it one day.&lt;/p&gt;
&lt;p&gt;But something else happened recently, even as I was starting
to delve back into the Matasano stuff. A &lt;a class="reference external" href="http://eudyptula-challenge.org/"&gt;new challenge&lt;/a&gt;, modeled on Matasano's approach, but
geared toward Linux kernel hacking and many of the practical intricacies
involved with the Linux kernel workflow: coding style, patch submission,
and so on, as well as the long slog of learning how an operating system
actually &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I found out about Eudyptula last month and signed right up. My free time
has been wrapped around that axle ever since. Unfortunately, that means
I'm not investing time in active FOSS projects or code I can share,
which was a thing with Matasano, too. But I'm working on a foundation.&lt;/p&gt;
&lt;p&gt;I'm still fascinated with cryptography, both practical and theoretical,
and the kinds of tasks that Matasano was throwing at me were also
especially useful in getting my head around some day-to-day code
organization and workflow. But &lt;em&gt;system programming&lt;/em&gt; has always been a
deeper interest of mine than some of the common learn-to-code tutorial
stuff out there these days. My day job involves embedded systems and
their designers, too, and I always had a strong inpulse for at least
the idea of actually &lt;em&gt;developing&lt;/em&gt; the kinds of real-time systems I
test and troubleshoot. But learning the low level has often felt
pretty slow-going, and I haven't found a whole lot of programmatic,
goal-oriented guidance. Eudyptula's little penguin seems, so far, to be
providing just what I needed.&lt;/p&gt;
&lt;p&gt;That's not to say he's making it &lt;em&gt;easy&lt;/em&gt;; it's still slow-going. But
that's because the Linux kernel is massive and mindbogglingly complex.
There's a sense of &lt;em&gt;progress&lt;/em&gt;, though, of what to read next, of what I'm
missing. And #kernelnewbies (an IRC channel) is providing a good amount
of assistance and perspective, too. There is a sense of goal in it all,
too: The introductory email in the series suggests that after completing
the exercises one should be equipped, if not to &lt;em&gt;be&lt;/em&gt; a kernel subsystem
maintainer (heavens forbid!), at least to understand what the heck it is
they do, and to be an active developer.&lt;/p&gt;
&lt;p&gt;And in addition to all that personal practical coolness, we're talking
about the Linux kernel: one of the most significant collaborative
efforts in the history of cooperation. Perplexing at times, not without
its barbs and pitfalls, but an effective sort of juggernaut that we all
use and benefit from every day, whether or not we know it or think about
it. And in its own interest of longevity, that juggernaut has produced
this little spinoff; it's pretty exciting to be plugged into that.&lt;/p&gt;
</summary><category term="linux-kernel"></category><category term="eudyptula"></category></entry><entry><title>Matasano Crypto Challenges, Exercise 13</title><link href="http://ninly.github.io/posts/2014/01/matasano-crypto-challenge-13/" rel="alternate"></link><updated>2014-01-31T18:30:00-06:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-01-31:posts/2014/01/matasano-crypto-challenge-13/</id><summary type="html">&lt;p&gt;I started up this blog as a place to muse on current tech projects and
share what I'm doing and learning. Then I went and got re-mired in my
Matasano code, which I can't share.&lt;/p&gt;
&lt;p&gt;Last spring, on a tip from &lt;a class="reference external" href="http://illruminations.com/"&gt;Steve&lt;/a&gt;, I spent a bunch of time working on the then-brand-new
&lt;a class="reference external" href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto Challenges&lt;/a&gt;, which you should go read about if you're
not already familiar.&lt;/p&gt;
&lt;p&gt;It was perfect for me in a lot of ways. In addition to my longstanding
interest in things cryptological, it was a perfect venue to try my hand
at more &amp;quot;practical&amp;quot; code, as I described in a &lt;a class="reference external" href="http://ninly.github.io/posts/2014/01/pip-and-virtualenv-sans-magic/"&gt;previous post&lt;/a&gt;. The
exercises are (more or less) graded, and in many cases tell you roughly
how you're going to approach the goal. I plugged at the first set of
exercises for a few days, and felt like I'd wrapped my head around
something new. I finished the first set and received the second, and
things got even more interesting.&lt;/p&gt;
&lt;p&gt;Without revealing any content, I'll say that exercise 12 was
particularly fun, engaging, and rewarding to accomplish. I felt quite a
bit of momentum, and ready to tackle whatever came at me.&lt;/p&gt;
&lt;p&gt;Then, I hit exercise 13. I got stuck.&lt;/p&gt;
&lt;p&gt;I think the exercise assumed a certain level of practical familiarity
with web-transaction infrastructure. &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[*]&lt;/a&gt; User authentication, cookies,
that sort of thing. I know more or less how that stuff works, but have
little hands-on experience actually implementing them for a production
website. Building on what I'd learned from the exercises thus far, I
quickly sort of painted myself into a corner, feeling like every avenue
I pursued wound up a dead end.&lt;/p&gt;
&lt;p&gt;Having a brand-new baby in the house also didn't help. Time devoted to
the project evaporated for a time.&lt;/p&gt;
&lt;p&gt;There was a HDD failure on my dev/hacking machine, too, but that's
another post.&lt;/p&gt;
&lt;p&gt;This week, after several months away from the code, I revisited the
Matasano Crypto Challenges. I worked through my existing code, reminding
myself what I'd done and how. I reimplemented a few functions, just to
see if different ways to do things seemed cleaner or appealed more.
Some did. And, as a lot of coders say, reading your own code months or
years later can be painful, but also eye-opening.&lt;/p&gt;
&lt;p&gt;Then I approached that sticky wicket, exercise 13, with a fresh mind. I
didn't even look at the code I'd written for it; I just reread the
assignment, and started coding.&lt;/p&gt;
&lt;p&gt;I got my test code to pass yesterday. Turns out, it wasn't that bad.  My
solution isn't perfect: I'm not entirely happy with some of the
assumptions it makes (again, I'm trying not to reveal anything about the
exercise content here), but it works, and at least I have something to
improve on now.&lt;/p&gt;
&lt;p&gt;And, best of all, now I get to think about exercise 14.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See &lt;a class="reference external" href="https://blog.pinboard.in/2013/04/the_matasano_crypto_challenges/"&gt;this Pinboard blog post&lt;/a&gt; for a good description of the Matasano Crypto Challenges by someone who &lt;em&gt;does&lt;/em&gt; have that familiarity.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="crypto"></category></entry><entry><title>Setting up Pelican</title><link href="http://ninly.github.io/posts/2014/01/setting-up-pelican/" rel="alternate"></link><updated>2014-01-17T03:30:00-06:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-01-17:posts/2014/01/setting-up-pelican/</id><summary type="html">&lt;p&gt;So here it is, a blog, live and loaded with some content! Like magic.&lt;/p&gt;
&lt;p&gt;I will not go into much detail here about the setup of this site or how
I got here, but a few resources did help me quite a bit along the way.
Among them (and I've probably missed a one or two):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican itself&lt;/a&gt;, of course&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/"&gt;Duncan Lock&lt;/a&gt;, whose post got me down the road a good long way -- but
who still owes us a Part 2!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://terriyu.info/blog/posts/2013/07/pelican-setup/"&gt;Terri Yu&lt;/a&gt;, whose post also helped me muck through the pelican setup&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/josefjezek/6053301"&gt;How to use Pelican on GitHub Pages&lt;/a&gt;, by Josef Jezek, with additional
details about ghp-import in &lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/master/docs/tips.rst"&gt;these tips&lt;/a&gt; from the Pelican docs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kecebongsoft.com/"&gt;Dedi Purwanto&lt;/a&gt;, mostly for the &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes/tree/master/cebong"&gt;theme&lt;/a&gt;, but nice blog, too :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, the real work had more to do with deciding how to host
and organize my content, and recommendations are thin for that sort
of thing. That seems appropriate to a static-site generator such as
pelican. The whole point: you do it however you want. It's not &lt;em&gt;that&lt;/em&gt;
hard, after all.&lt;/p&gt;
&lt;p&gt;As such, assuming this project sticks around awhile, it will probably
be a casual work in progress for some time. Since what I'm after is
a simple dumping ground for ideas, development progress, and makery
learnings, I hope to remain focused more on content and ideas, rather
than packaging and presentation (except insofar as these constitute
makery learnings). But do contact me if you have any recommendations
or notice something I've obviously overlooked.&lt;/p&gt;
&lt;p&gt;A few honorable mentions and bookmarks: blog posts and articles about
pelican, static-site generators, and devblogging in general that I
didn't use explicitly when initially setting up this site, but which
I've come across and expect to come back to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Helder Correira's &lt;a class="reference external" href="http://heldercorreia.com/blog/from-wordpress-to-pelican"&gt;From Wordpress to Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geoff Gimse's intriguingly titled &lt;a class="reference external" href="http://www.textandhubris.com"&gt;Text and Hubris&lt;/a&gt; (several posts,
but the &lt;a class="reference external" href="http://www.textandhubris.com/tag/pelican"&gt;pelican-tagged articles&lt;/a&gt; are a place to start)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="blog"></category></entry><entry><title>Pip and virtualenv sans magic</title><link href="http://ninly.github.io/posts/2014/01/pip-and-virtualenv-sans-magic/" rel="alternate"></link><updated>2014-01-04T12:00:00-06:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-01-04:posts/2014/01/pip-and-virtualenv-sans-magic/</id><summary type="html">&lt;p&gt;I'm trying to bridge the gap between understanding the syntax of Python (among another language or three) and &lt;em&gt;how to develop&lt;/em&gt; in them. To wit, I was setting up some of the standard tools for package management on my Arch Linux system, and having a little trouble understanding why I was getting permissions errors while following several of the pip/virtualenv tutorials out there.&lt;/p&gt;
&lt;p&gt;Jamie Matthews's post at &lt;a class="reference external" href="http://dabapps.com/blog/introduction-to-pip-and-virtualenv-python/"&gt;dabapps&lt;/a&gt; did a lot to clear up a lot of whatever was throwing me off.&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>call("o muse");</title><link href="http://ninly.github.io/posts/2014/01/call-o-muse/" rel="alternate"></link><updated>2014-01-01T10:20:00-06:00</updated><author><name>ninly</name></author><id>tag:ninly.github.io,2014-01-01:posts/2014/01/call-o-muse/</id><summary type="html">&lt;p&gt;I didn't actually write this post on New Year's Day, nor does this blog have much to do with the new year, but it's a convenient and timely starting point. So,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think I'm like a lot of people who use static-blog engines (pelican, jekyll, etc.), in that I'm no longer very thrilled with available hosted services. Intermittently, I've wanted a place to record thoughts and progress specifically related to my efforts to learn technological skills, particularly coding and electronics. To that end, I'm not really looking for the kind of &amp;quot;social&amp;quot; experience offered by a Blogger, Tumblr, or Twitter -- but on the other hand, I'd like something more dynamic, versioned, and publicly accessible than personal pen-and-paper diary or development notebook. I'd like an easy way both to look back over what I've done and how far I have (or haven't) come with a project, as well as an easy resource to share with people who may be interested in that progress.&lt;/p&gt;
&lt;p&gt;As such, don't look here for subtle, crafted prose and public relations. Just notes, some thoughts, nods to the helpful posts and pages of other developers, and probably a few bookmark-like links to help me remember helpful resources. However, you are welcome here; If any of this content is helpful to you, then all the more benefit!&lt;/p&gt;
</summary><category term="blog"></category></entry></feed>